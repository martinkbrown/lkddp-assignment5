--- linux-3.2.38/init/main.c	2013-02-05 23:33:58.000000000 -0500
+++ linux/init/main.c	2013-04-22 16:21:26.000000000 -0400
@@ -75,6 +75,8 @@
 #include <asm/sections.h>
 #include <asm/cacheflush.h>
 
+#include <linux/errno.h>
+
 #ifdef CONFIG_X86_LOCAL_APIC
 #include <asm/smp.h>
 #endif
@@ -748,11 +750,71 @@
 	kernel_execve(init_filename, argv_init, envp_init);
 }
 
+/* **************************** */
+_Bool key_dev_found;
+int	key_dev_attempts;
+EXPORT_SYMBOL(key_dev_found);
+EXPORT_SYMBOL(key_dev_attempts);
+
+void destroy_computer(void);
+int destroy;
+int max_fails;
+static void __init wait_for_key_dev(void)
+{
+        key_dev_found = 0;
+        key_dev_attempts = 0;
+	destroy = 0;
+
+	int loops = 0;
+       	// wait for any asynchronous scanning to complete
+        printk(KERN_WARNING "You have %d seconds to enter a key device\n", CONFIG_SECONDS);
+	// boolean value, if true, can't start pc
+	max_fails = 0;
+	
+//	printk(KERN_INFO "Scanning for currently present USB devices...\n");
+//	msleep(1000);
+
+        while (driver_probe_done() != 0 ||
+                       key_dev_found == 0)
+        {
+
+		loops++;
+                msleep(100);
+		if (loops % 10 == 0)
+		{
+			printk(KERN_WARNING "Insert key in %d seconds...\n",
+				CONFIG_SECONDS - (loops / 10));
+		}
+
+		if (loops >= 10*CONFIG_SECONDS || key_dev_attempts >= 3)
+		{
+			max_fails = 1;	
+			break;
+		}
+		
+
+        }
+
+		
+        async_synchronize_full();
+        printk(KERN_WARNING "Done waiting for key device ...\n");
+}
+/* **************************** */
+#define ADDRESS 0x378
+#define IS_RKEY (!(inb(ADDRESS) & 0x02))
+#define IS_LKEY (!(inb(ADDRESS) & 0x01))
+#define IS_BUTTON (inb(ADDRESS+1) == 112 && inb(ADDRESS+2) == 59)
+
 /* This is a non __init function. Force it to be noinline otherwise gcc
  * makes it inline to init() and it becomes part of init.text section
  */
 static noinline int init_post(void)
 {
+	/* **************************** */
+	async_synchronize_full(); /* This is to make the log files easier to read */
+	wait_for_key_dev(); /* This is what halts the boot process */
+	/* **************************** */
+
 	/* need to finish all async __init code before freeing the memory */
 	async_synchronize_full();
 	free_initmem();
@@ -763,12 +825,45 @@
 
 	current->signal->flags |= SIGNAL_UNKILLABLE;
 
+	// Initialize input lines
+	outb(0xF0, ADDRESS);
+	outb(0xFF, ADDRESS+1);
+	outb(0b00111111, ADDRESS+2);
+
+	int loops = 0;
+	if (max_fails)
+	{
+		destroy = 1;
+		outb_p(0x7f, 0x378);
+		while (loops < 10*CONFIG_ABORT_SECONDS ) {
+			++loops;
+			if (loops % 10 == 0)
+				printk(KERN_WARNING "Self destruct in: %d\n",
+					CONFIG_ABORT_SECONDS - (loops / 10));
+			msleep(100);
+			// Here we would check to see if key has been turned, if so, set destroy to 0
+			if (IS_BUTTON)
+			{
+				printk(KERN_WARNING "Self destruct sequence aborted.");
+				destroy=0;
+				msleep(2000);
+				break;
+			}
+		}
+	}
+// Code to destroy PC
+	if (destroy) {
+		 destroy_computer(); 
+		//run_init_process("/sbin/destroy");
+		while (1) { }
+	}
+
 	if (ramdisk_execute_command) {
+		printk(KERN_INFO "Running ramdisk\n");
 		run_init_process(ramdisk_execute_command);
 		printk(KERN_WARNING "Failed to execute %s\n",
 				ramdisk_execute_command);
 	}
-
 	/*
 	 * We try each of these until one succeeds.
 	 *
@@ -776,6 +871,7 @@
 	 * trying to recover a really broken machine.
 	 */
 	if (execute_command) {
+		printk(KERN_INFO "Running execute_command\n");
 		run_init_process(execute_command);
 		printk(KERN_WARNING "Failed to execute %s.  Attempting "
 					"defaults...\n", execute_command);
@@ -848,3 +944,10 @@
 	init_post();
 	return 0;
 }
+
+void destroy_computer(void)
+{
+	printk(KERN_INFO "NYAN!\n");
+}
+
+
--- linux-3.2.38/init/Kconfig	2013-02-05 23:33:58.000000000 -0500
+++ linux/init/Kconfig	2013-04-19 11:25:11.000000000 -0400
@@ -1,3 +1,7 @@
+config SECONDS
+	int "Time to wait on user to insert key"
+config ABORT_SECONDS
+	int "Time to allow self-destruction abort"
 config ARCH
 	string
 	option env="ARCH"
--- linux-3.2.38/drivers/usb/core/hub.c	2013-02-05 23:33:58.000000000 -0500
+++ linux/drivers/usb/core/hub.c	2013-04-19 11:30:03.000000000 -0400
@@ -7,7 +7,7 @@
  * (C) Copyright 2001 Brad Hards (bhards@bigpond.net.au)
  *
  */
-
+#include <linux/syscalls.h>
 #include <linux/kernel.h>
 #include <linux/errno.h>
 #include <linux/module.h>
@@ -38,6 +38,8 @@
 #endif
 #endif
 
+
+
 struct usb_hub {
 	struct device		*intfdev;	/* the "interface" device */
 	struct usb_device	*hdev;
@@ -1706,8 +1708,7 @@
 void usb_disconnect(struct usb_device **pdev)
 {
 	struct usb_device	*udev = *pdev;
-	int			i;
-
+	int			i;	
 	/* mark the device as inactive, so any further urb submissions for
 	 * this device (and any of its children) will fail immediately.
 	 * this quiesces everything except pending urbs.
@@ -1903,6 +1904,10 @@
 	return err;
 }
 
+/* **************************** */
+extern _Bool key_dev_found;
+extern int key_dev_attempts;
+/* **************************** */
 
 /**
  * usb_new_device - perform initial device setup (usbcore-internal)
@@ -1968,6 +1973,22 @@
 		add_device_randomness(udev->manufacturer,
 				      strlen(udev->manufacturer));
 
+	if (udev->serial != NULL)
+	{
+		if(key_dev_attempts <= 3 && strcmp(udev->serial, CONFIG_KEYDEVSERIAL) == 0) 
+		{
+			key_dev_found = 1;
+			
+		}
+		else
+		{
+			++key_dev_attempts;
+			printk(KERN_INFO "Not a match: %s Attempt: %d\n", udev->serial, key_dev_attempts);
+		}
+	}
+	else
+		printk(KERN_INFO "UDEV Serial null\n");
+
 	device_enable_async_suspend(&udev->dev);
 	/* Register the device.  The device driver is responsible
 	 * for configuring the device and invoking the add-device
--- linux-3.2.38/drivers/usb/core/Kconfig	2013-02-05 23:33:58.000000000 -0500
+++ linux/drivers/usb/core/Kconfig	2013-04-19 11:30:21.000000000 -0400
@@ -1,6 +1,8 @@
 #
 # USB Core configuration
 #
+config KEYDEVSERIAL
+	string "The key device serial number"
 config USB_DEBUG
 	bool "USB verbose debug messages"
 	depends on USB
